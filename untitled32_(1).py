# -*- coding: utf-8 -*-
"""Untitled32 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qhEhRp3l8SXUDSP4qWATOOuhf9QdTDdB
"""

import sys
from PIL import Image, ImageDraw
from queue import PriorityQueue, Queue
from collections import deque

class Node:
    def __init__(self, state, parent=None, action=None, g=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.g = g  # Cost to reach this node
        self.heuristic = heuristic  # Estimated cost to reach the goal (for A*)

    def f(self):
        return self.g + self.heuristic  # Total cost function f = g + h

    def __lt__(self, other):
        return self.f() < other.f()

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(self.state)

class StackFrontier:
    def __init__(self):
        self.frontier = []

    def add(self, node):
        self.frontier.append(node)

    def contains_state(self, state):
        return any(node.state == state for node in self.frontier)

    def empty(self):
        return len(self.frontier) == 0

    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            return self.frontier.pop()

class QueueFrontier(StackFrontier):
    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            return self.frontier.pop(0)

class Maze:
    def __init__(self, filename):
        with open(filename) as f:
            contents = f.read()

        if contents.count("A") != 1:
            raise Exception("maze must have exactly one start point")
        if contents.count("B") != 1:
            raise Exception("maze must have exactly one goal")

        contents = contents.splitlines()
        self.height = len(contents)
        self.width = max(len(line) for line in contents)

        self.walls = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                try:
                    if contents[i][j] == "A":
                        self.start = (i, j)
                        row.append(False)
                    elif contents[i][j] == "B":
                        self.goal = (i, j)
                        row.append(False)
                    elif contents[i][j] == " ":
                        row.append(False)
                    else:
                        row.append(True)
                except IndexError:
                    row.append(False)
            self.walls.append(row)

        self.solution = None
        self.num_explored = 0

    def print(self):
        solution = self.solution[1] if self.solution is not None else None
        print()
        for i, row in enumerate(self.walls):
            for j, col in enumerate(row):
                if col:
                    print("â–ˆ", end="")
                elif (i, j) == self.start:
                    print("A", end="")
                elif (i, j) == self.goal:
                    print("B", end="")
                elif solution is not None and (i, j) in solution:
                    print("*", end="")
                else:
                    print(" ", end="")
            print()
        print()

    def neighbors(self, state):
        row, col = state
        candidates = [
            ("up", (row - 1, col)),
            ("down", (row + 1, col)),
            ("left", (row, col - 1)),
            ("right", (row, col + 1))
        ]

        result = []
        for action, (r, c) in candidates:
            if 0 <= r < self.height and 0 <= c < self.width and not self.walls[r][c]:
                result.append((action, (r, c)))
        return result

    def solve_bfs(self):
        """Breadth-First Search"""
        self.num_explored = 0
        start = Node(state=self.start)
        frontier = QueueFrontier()
        frontier.add(start)
        self.explored = set()

        while True:
            if frontier.empty():
                print("Frontier is empty, no solution found")
                print("Explored States:", self.explored)
                raise Exception("no solution")

            node = frontier.remove()
            self.num_explored += 1

            if node.state == self.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                self.solution = (actions, cells)
                return

            self.explored.add(node.state)

            for action, state in self.neighbors(node.state):
                if state not in self.explored and not any(node.state == state for node in frontier.frontier):
                    child = Node(state=state, parent=node, action=action)
                    frontier.add(child)

    def solve_dfs(self):
        """Depth-First Search"""
        self.num_explored = 0
        start = Node(state=self.start)
        frontier = StackFrontier()
        frontier.add(start)
        self.explored = set()

        while True:
            if frontier.empty():
                print("Frontier is empty, no solution found")
                print("Explored States:", self.explored)
                raise Exception("no solution")

            node = frontier.remove()
            self.num_explored += 1

            if node.state == self.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                self.solution = (actions, cells)
                return

            self.explored.add(node.state)

            for action, state in self.neighbors(node.state):
                if state not in self.explored and not any(node.state == state for node in frontier.frontier):
                    child = Node(state=state, parent=node, action=action)
                    frontier.add(child)

    def solve_greedy(self):
        """Greedy Best-First Search"""
        self.num_explored = 0
        start = Node(state=self.start, heuristic=self.manhattan_distance(self.start))
        frontier = QueueFrontier()
        frontier.add(start)
        self.explored = set()

        while True:
            if frontier.empty():
                print("Frontier is empty, no solution found")
                print("Explored States:", self.explored)
                raise Exception("no solution")

            node = frontier.remove()
            self.num_explored += 1

            if node.state == self.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                self.solution = (actions, cells)
                return

            self.explored.add(node.state)

            for action, state in self.neighbors(node.state):
                if state not in self.explored and not any(node.state == state for node in frontier.frontier):
                    heuristic = self.manhattan_distance(state)
                    child = Node(state=state, parent=node, action=action, heuristic=heuristic)
                    frontier.add(child)

    def solve_a_star(self):
        """A* Search"""
        self.num_explored = 0
        start = Node(state=self.start, g=0, heuristic=self.manhattan_distance(self.start))
        frontier = PriorityQueue()
        frontier.put(start)
        self.explored = set()

        while True:
            if frontier.empty():
                print("Frontier is empty, no solution found")
                print("Explored States:", self.explored)
                raise Exception("no solution")

            node = frontier.get()
            self.num_explored += 1

            if node.state == self.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                self.solution = (actions, cells)
                return

            self.explored.add(node.state)

            for action, state in self.neighbors(node.state):
                if state not in self.explored and not any(node.state == state for node in frontier.queue):
                    g = node.g + 1
                    heuristic = self.manhattan_distance(state)
                    child = Node(state=state, parent=node, action=action, g=g, heuristic=heuristic)
                    frontier.put(child)

    def manhattan_distance(self, state):
        row, col = state
        goal_row, goal_col = self.goal
        return abs(row - goal_row) + abs(col - goal_col)

    def output_image(self, filename, show_solution=True, show_explored=False):
        cell_size = 50
        cell_border = 2

        img = Image.new(
            "RGBA",
            (self.width * cell_size, self.height * cell_size),
            "black"
        )
        draw = ImageDraw.Draw(img)

        solution = self.solution[1] if self.solution is not None else None
        for i, row in enumerate(self.walls):
            for j, col in enumerate(row):
                if col:
                    fill = (40, 40, 40)
                elif (i, j) == self.start:
                    fill = (255, 0, 0)
                elif (i, j) == self.goal:
                    fill = (0, 171, 28)
                elif solution is not None and show_solution and (i, j) in solution:
                    fill = (220, 235, 113)
                elif show_explored and (i, j) in self.explored:
                    fill = (212, 97, 85)
                else:
                    fill = (237, 240, 252)

                draw.rectangle(
                    [(
                        j * cell_size + cell_border,
                        i * cell_size + cell_border
                    ), (
                        (j + 1) * cell_size - cell_border,
                        (i + 1) * cell_size - cell_border
                    )],
                    fill=fill
                )

        img.save(filename)

# Example usage
if __name__ == "__main__":
    filename = "Downloads\maze.txt"

    # BFS
    m = Maze(filename)
    print("Breadth-First Search:")
    m.solve_bfs()
    print("States Explored:", m.num_explored)
    print("Solution:")
    m.print()
    m.output_image("medium_maze_bfs.png", show_explored=True)

    # DFS
    m = Maze(filename)
    print("Depth-First Search:")
    m.solve_dfs()
    print("States Explored:", m.num_explored)
    print("Solution:")
    m.print()
    m.output_image("medium_maze_dfs.png", show_explored=True)

    # A* Search
    m = Maze(filename)
    print("A* Search:")
    m.solve_a_star()
    print("States Explored:", m.num_explored)
    print("Solution:")
    m.print()
    m.output_image("medium_maze_astar.png", show_explored=True)